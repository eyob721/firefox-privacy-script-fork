// IMPORTANT: Start your code on the 2nd line
// Normandy API URL
pref("app.normandy.api_url", "");
// Disable Normandy
pref("app.normandy.enabled", false);
// Disable Shield Studies opt-out
pref("app.shield.optoutstudies.enabled", false);
// Automatically check for application updates
pref("app.update.auto", true);
// Disable Beacon API
pref("beacon.enabled", false);
// Breakpad crash reporting
pref("breakpad.reportURL", "");
// Disable about:config warning
pref("browser.aboutConfig.showWarning", false);
// Disable offline cache
pref("browser.cache.offline.enable", false);
// Disable crash report auto-submission
pref("browser.crashReports.unsubmittedCheck.autoSubmit", false);
// Disable additional crash report auto-submission
pref("browser.crashReports.unsubmittedCheck.autoSubmit2", false);
// Disable crash report checks
pref("browser.crashReports.unsubmittedCheck.enabled", false);
// Disable reset prompt
pref("browser.disableResetPrompt", true);
// Disable domain guessing
pref("browser.fixup.alternate.enabled", false);
// Disable new tab preload
pref("browser.newtab.preload", false);
// Disable Pocket integration in new tab
pref("browser.newtabpage.activity-stream.section.highlights.includePocket", false);
// Disable new tab page
pref("browser.newtabpage.enabled", false);
// Disable enhanced new tab page
pref("browser.newtabpage.enhanced", false);
// New tab page intro has been shown
pref("browser.newtabpage.introShown", true);
// Safe Browsing Application Reputation URL
pref("browser.safebrowsing.appRepURL", "");
// Disable blocked URIs in Safe Browsing
pref("browser.safebrowsing.blockedURIs.enabled", false);
// Disable Safe Browsing for downloads
pref("browser.safebrowsing.downloads.enabled", false);
// Disable remote Safe Browsing for downloads
pref("browser.safebrowsing.downloads.remote.enabled", false);
// Safe Browsing remote URL
pref("browser.safebrowsing.downloads.remote.url", "");
// Disable Safe Browsing
pref("browser.safebrowsing.enabled", false);
// Disable Safe Browsing for malware
pref("browser.safebrowsing.malware.enabled", false);
// Disable Safe Browsing for phishing
pref("browser.safebrowsing.phishing.enabled", false);
// Disable search suggestions
pref("browser.search.suggest.enabled", false);
// Self-support URL
pref("browser.selfsupport.url", "");
// Sessionstore privacy level
pref("browser.sessionstore.privacy_level", 2);
// Disable checking for the default browser
pref("browser.shell.checkDefaultBrowser", false);
// Ignore milestone updates
pref("browser.startup.homepage_override.mstone", "ignore");
// Disable crash reporting for tabs
pref("browser.tabs.crashReporting.sendReport", false);
// Disable group labels in the URL bar
pref("browser.urlbar.groupLabels.enabled", false);
// Disable quick suggestions in the URL bar
pref("browser.urlbar.quicksuggest.enabled", false);
// Disable speculative connect in the URL bar
pref("browser.urlbar.speculativeConnect.enabled", false);
// Disable trimming URLs in the URL bar
pref("browser.urlbar.trimURLs", false);
// Disable Firefox Health Report service
pref("datareporting.healthreport.service.enabled", false);
// Disable data upload for Firefox Health Report
pref("datareporting.healthreport.uploadEnabled", false);
// Disable data submission for experiments
pref("datareporting.policy.dataSubmissionEnabled", false);
// Disable ambient light sensor
pref("device.sensors.ambientLight.enabled", false);
// Disable all sensors
pref("device.sensors.enabled", false);
// Disable motion sensor
pref("device.sensors.motion.enabled", false);
// Disable orientation sensor
pref("device.sensors.orientation.enabled", false);
// Disable proximity sensor
pref("device.sensors.proximity.enabled", false);
// Disable battery status API
pref("dom.battery.enabled", false);
// Disable clipboard events in DOM
pref("dom.event.clipboardevents.enabled", false);
// Disable Web Audio API
pref("dom.webaudio.enabled", false);
// Disable active experiments
pref("experiments.activeExperiment", false);
// Disable experiments
pref("experiments.enabled", false);
// Experiment manifest URI
pref("experiments.manifest.uri", "");
// Supported experiments
pref("experiments.supported", false);
// Whitelist for the CanvasBlocker extension
pref("extensions.CanvasBlocker@kkapsner.de.whiteList", "");
// Whitelist for the ClearURLs extension
pref("extensions.ClearURLs@kevinr.whiteList", "");
// Whitelist for the Firefox Multi-Account Containers extension
pref("extensions.FirefoxMulti-AccountContainers@mozilla.whiteList", "");
// Whitelist for the Temporary Containers extension
pref("extensions.TemporaryContainers@stoically.whiteList", "");
// Scope for auto-disabling extensions
pref("extensions.autoDisableScopes", 14);
// Enable caching for Firefox Add-ons
pref("extensions.getAddons.cache.enabled", false);
// Show the Add-ons pane
pref("extensions.getAddons.showPane", false);
// Opt-in status for Greasemonkey statistics
pref("extensions.greasemonkey.stats.optedin", false);
// URL for Greasemonkey statistics
pref("extensions.greasemonkey.stats.url", "");
// Enable or disable the Pocket extension
pref("extensions.pocket.enabled", false);
// Disable uploading of screenshots
pref("extensions.screenshots.upload-disabled", true);
// API URL for the Shield Recipe Client extension
pref("extensions.shield-recipe-client.api_url", "");
// Enable or disable the Shield Recipe Client extension
pref("extensions.shield-recipe-client.enabled", false);
// Discover URL for webservice
pref("extensions.webservice.discoverURL", "");
// Disable the warning prompt for about:config
pref("general.warnOnAboutConfig", false);
// Enable keyword enabled
pref("keyword.enabled", true);
// Set the default behavior for media autoplay
pref("media.autoplay.default", 1);
// Disable media autoplay
pref("media.autoplay.enabled", false);
// Disable Encrypted Media Extensions (EME)
pref("media.eme.enabled", false);
// Disable GMP Widevine CDM (Content Decryption Module)
pref("media.gmp-widevinecdm.enabled", false);
// Disable media navigator
pref("media.navigator.enabled", false);
// Disable WebRTC peerconnection
pref("media.peerconnection.enabled", false);
// Disable media video stats
pref("media.video_stats.enabled", false);
// Show punycode in the address bar for internationalized domain names (IDN)
pref("network.IDN_show_punycode", true);
// Disable experiments in network requests
pref("network.allow-experiments", false);
// Disable captive portal detection service
pref("network.captive-portal-service.enabled", false);
// Set cookie behavior to block all third-party cookies
pref("network.cookie.cookieBehavior", 1);
// Disable DNS prefetching
pref("network.dns.disablePrefetch", true);
// Disable DNS prefetching from HTTPS pages
pref("network.dns.disablePrefetchFromHTTPS", true);
// Set referer XOriginPolicy to strict-origin-when-cross-origin
pref("network.http.referer.XOriginPolicy", 2);
// Set referer XOriginTrimmingPolicy to strict-origin-when-cross-origin
pref("network.http.referer.XOriginTrimmingPolicy", 2);
// Spoof the referer source
pref("network.http.referer.spoofSource", true);
// Disable speculative parallel connections
pref("network.http.speculative-parallel-limit", 0);
// Disable predictor prefetching
pref("network.predictor.enable-prefetch", false);
// Disable autofill for forms
pref("signon.autofillForms", false);
// Disable telemetry data archiving
pref("toolkit.telemetry.archive.enabled", false);
// Disable Background Hang Reporter (BHR) pings
pref("toolkit.telemetry.bhrPing.enabled", false);
// Clear the cached Client ID used for telemetry
pref("toolkit.telemetry.cachedClientID", "");
// Disable general telemetry data collection
pref("toolkit.telemetry.enabled", false);
// Disable telemetry ping on the first shutdown of Firefox
pref("toolkit.telemetry.firstShutdownPing.enabled", false);
// Disable hybrid content telemetry
pref("toolkit.telemetry.hybridContent.enabled", false);
// Disable telemetry ping when a new profile is created
pref("toolkit.telemetry.newProfilePing.enabled", false);
// Set telemetry prompted value to 2 (2 means the user was prompted to enable telemetry)
pref("toolkit.telemetry.prompted", 2);
// Reject telemetry data reporting
pref("toolkit.telemetry.rejected", true);
// Disable telemetry data reporting policy on first run
pref("toolkit.telemetry.reportingpolicy.firstRun", false);
// Set the telemetry server to an empty string (disabling telemetry server)
pref("toolkit.telemetry.server", "");
// Disable the telemetry shutdown ping sender
pref("toolkit.telemetry.shutdownPingSender.enabled", false);
// Disable unified telemetry data collection
pref("toolkit.telemetry.unified", false);
// Disable unified telemetry opt-in
pref("toolkit.telemetry.unifiedIsOptIn", false);
// Disable update-related telemetry pings
pref("toolkit.telemetry.updatePing.enabled", false);
// Disable WebGL (Web Graphics Library) in Firefox
pref("webgl.disabled", true);
// Override the WebGL renderer string with an empty string
pref("webgl.renderer-string-override", " ");
// Override the WebGL vendor string with an empty string
pref("webgl.vendor-string-override", " ");
// Enable HTTPS-Only Mode
pref("dom.security.https_only_mode", true);
// Disable Default Browser Agent
pref("default-browser-agent.enabled", false);
// Disable telemetry for New Tab pages activity stream feeds
pref("browser.newtabpage.activity-stream.feeds.telemetry", false);
// Disable telemetry for New Tab pages activity stream
pref("browser.newtabpage.activity-stream.telemetry", false);
// Disable telemetry ping center
pref("browser.ping-centre.telemetry", false);
// Disable Firefox Health Report service
pref("datareporting.healthreport.service.enabled", false);
// Disable telemetry logging for Developer Tools onboarding
pref("devtools.onboarding.telemetry.logged", false);
// Dont allow websites to prevent use of right-click, or otherwise messing with the context menu.
pref("dom.event.contextmenu.enabled", false);
// Dont allow websites to prevent copy and paste.
pref("dom.event.clipboardevents.enabled", false);
// Disable some animations
pref("browser.tabs.animate", false);
pref("browser.download.animateNotifications", false);
// Reduce memory usage when minimized (Windows only)
pref("config.trim_on_minimize", true);
// Disable site reading installed plugins
pref("plugins.enumerable_names", "");
// Telling websites where you came from. Disabling may break some sites.
// 0 = Disable referrer headers
pref("network.http.sendRefererHeader", 0);
// Disable referrer headers between https websites
pref("network.http.sendSecureXSiteReferrer", false);
// Disables geolocation and Firefox logging geolocation requests
pref("geo.enabled", false);
pref("geo.wifi.uri", "");
pref("browser.search.geoip.url", "");
// Disable Google Safe Browsing and malware and phishing protection.
// Stop sending links and downloading lists from Google.
// Security risk, but privacy improvement.
// Note: this list may be incomplete as Firefox updates. Be sure to search for browser.safebrowsing.provider.google*
// Also, simply setting safebrowsing.*.enabled to false should make setting the URLs to blank redundant, but better to be safe.
// If you see anything pointing to Google, probably best to remove it.
pref("browser.safebrowsing.provider.google4.updateURL", "");
pref("browser.safebrowsing.provider.google4.reportURL", "");
pref("browser.safebrowsing.provider.google4.reportPhishMistakeURL", "");
pref("browser.safebrowsing.provider.google4.reportMalwareMistakeURL", "");
pref("browser.safebrowsing.provider.google4.lists", "");
pref("browser.safebrowsing.provider.google4.gethashURL", "");
pref("browser.safebrowsing.provider.google4.dataSharingURL", "");
pref("browser.safebrowsing.provider.google4.dataSharing.enabled", false);
pref("browser.safebrowsing.provider.google4.advisoryURL", "");
pref("browser.safebrowsing.provider.google4.advisoryName", "");
pref("browser.safebrowsing.provider.google.updateURL", "");
pref("browser.safebrowsing.provider.google.reportURL", "");
pref("browser.safebrowsing.provider.google.reportPhishMistakeURL", "");
pref("browser.safebrowsing.provider.google.reportMalwareMistakeURL", "");
pref("browser.safebrowsing.provider.google.pver", "");
pref("browser.safebrowsing.provider.google.lists", "");
pref("browser.safebrowsing.provider.google.gethashURL", "");
pref("browser.safebrowsing.provider.google.advisoryURL", "");
pref("browser.safebrowsing.downloads.remote.url", "");
// Can call home every time Firefox is started or homepage is visited.
// https://support.mozilla.org/en-US/kb/how-stop-firefox-making-automatic-connections
// http://kb.mozillazine.org/Connections_established_on_startup_-_Firefox
pref("browser.aboutHomeSnippets.updateUrL", "");
pref("browser.startup.homepage_override.buildID", "");
pref("startup.homepage_welcome_url", "");
pref("startup.homepage_welcome_url.additional", "");
pref("startup.homepage_override_url", "");
// Disable website tracking clicks.
pref("browser.send_pings", false);
// Only send pings if send and receiving host match (same website).
pref("browser.send_pings.require_same_host", true);
// Disable website reading how much battery your mobile device or laptop has.
pref("dom.battery.enabled", false);
// Number of cached DNS entries. Lower number = More requests but less data stored.
pref("network.dnsCacheEntries", 100);
// Time DNS entries are cached in seconds.
pref("network.dnsCacheExpiration", 60);
// Disables recording of visited websites.
pref("places.history.enabled", false);
// Disables saving of form data.
pref("browser.formfill.enable", false);
// Disables caching on the hard drive.
pref("browser.cache.disk.enable", false);
// Disables caching for SSL connections.
pref("browser.cache.disk_cache_ssl", false);
// Disables caching in memory.
pref("browser.cache.memory.enable", false);
// Disable IPv6 if your OS or ISP does not support it.
pref("network.dns.disableIPv6", true);
// Link prefetching is disabled.
pref("network.predictor.enabled", false);
pref("network.prefetch-next", false);
// Disable WebSockets.
pref("network.websocket.enabled", false);
// Disable 3rd party closed-source Hello integration.
// Note: Only affects older versions of Firefox as "Hello" has been discontinued in favor of WebRTC.
pref("loop.enabled", false);
// Disable 3rd party closed-source Pocket integration.
// Note: In older versions of Firefox, this is browser.pocket.enabled.
pref("extensions.pocket.enabled", false);
pref("extensions.pocket.site", "");
pref("extensions.pocket.oAuthConsumerKey", "");
pref("extensions.pocket.api", "");
// Increases animation speed. May mitigate choppy scrolling.
pref("layout.frame_rate.precise", true);
// Disable WASM
pref("javascript.options.wasm", false);
// Disable JIT 
// Breaks too many sites, use umatrix instead
// pref("javascript.options.ion", false);
// pref("javascript.options.baselinejit", false);
